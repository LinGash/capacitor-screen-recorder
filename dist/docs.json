{
  "api": {
    "name": "ScreenRecorderPlugin",
    "slug": "screenrecorderplugin",
    "docs": "",
    "tags": [],
    "methods": [
      {
        "name": "start",
        "signature": "(options: any) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "any"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "start"
      },
      {
        "name": "stop",
        "signature": "(options: any) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "any"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "stop"
      },
      {
        "name": "recorder_status",
        "signature": "(options: any) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "any"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "recorder_status"
      },
      {
        "name": "addListener",
        "signature": "(eventName: 'onRecordingStarted', listenerFunc: (data: any) => { status: true; message: \"Recording Started\"; }) => Promise<PluginListenerHandle> & PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'onRecordingStarted'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(data: any) => { status: true; message: 'Recording Started'; }"
          }
        ],
        "returns": "Promise<PluginListenerHandle> & PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle"
        ],
        "slug": "addlisteneronrecordingstarted"
      },
      {
        "name": "addListener",
        "signature": "(eventName: 'onRecordingComplete', listenerFunc: (data: any) => { status: true; message: \"Recording Stopped\"; file_name: \"2023-08-25-10-10-10.mp4\"; file_path: \"/storage/emulated/0/Movies/ScreenRecordings/2023-08-25-10-10-10.mp4\"; }) => Promise<PluginListenerHandle> & PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'onRecordingComplete'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(data: any) => { status: true; message: 'Recording Stopped'; file_name: '2023-08-25-10-10-10.mp4'; file_path: '/storage/emulated/0/Movies/ScreenRecordings/2023-08-25-10-10-10.mp4'; }"
          }
        ],
        "returns": "Promise<PluginListenerHandle> & PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle"
        ],
        "slug": "addlisteneronrecordingcomplete"
      },
      {
        "name": "addListener",
        "signature": "(eventName: 'onRecordingError', listenerFunc: (data: any) => { status: false; message: \"Error Message\"; }) => Promise<PluginListenerHandle> & PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'onRecordingError'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(data: any) => { status: false; message: 'Error Message'; }"
          }
        ],
        "returns": "Promise<PluginListenerHandle> & PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle"
        ],
        "slug": "addlisteneronrecordingerror"
      }
    ],
    "properties": []
  },
  "interfaces": [
    {
      "name": "PluginListenerHandle",
      "slug": "pluginlistenerhandle",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "remove",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "() => Promise<void>"
        }
      ]
    }
  ],
  "enums": [],
  "typeAliases": [],
  "pluginConfigs": []
}