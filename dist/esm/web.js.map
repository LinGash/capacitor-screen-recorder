{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAwB,MAAM,iBAAiB,CAAC;AAGlE,MAAM,OAAO,iBACX,SAAQ,SAAS;IAGjB,KAAK,CAAC,IAAI,CAAC,OAA0B;QACnC,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAC7B,OAAO,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,EAAE,CAAC;IAClC,CAAC;IAED,KAAK,CAAC,KAAK,CAAC,OAAY;QACtB,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,OAAO,CAAC,CAAC;QAC5C,MAAM,IAAI,CAAC,aAAa,CAAC,0DAA0D,CAAC,CAAC;IACvF,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,OAAY;QACrB,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,OAAO,CAAC,CAAC;QAC3C,MAAM,IAAI,CAAC,aAAa,CAAC,yDAAyD,CAAC,CAAC;IACtF,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,OAAY;QAChC,OAAO,CAAC,GAAG,CAAC,8BAA8B,EAAE,OAAO,CAAC,CAAC;QACrD,MAAM,IAAI,CAAC,aAAa,CAAC,oEAAoE,CAAC,CAAC;IACjG,CAAC;IAED,WAAW,CACT,SAAiB,EACjB,YAAkC;QAElC,MAAM,MAAM,GAAG,KAAK,CAAC,WAAW,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;QAC1D,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE;YAC3B,MAAM,EAAE,KAAK,IAAI,EAAE;gBACjB,OAAO,CAAC,GAAG,CAAC,gBAAgB,SAAS,UAAU,CAAC,CAAC;gBACjD,CAAC,MAAM,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC;YAC1B,CAAC;SACF,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["import { WebPlugin, PluginListenerHandle } from '@capacitor/core';\r\nimport type { ScreenRecorderPlugin } from './definitions';\r\n\r\nexport class ScreenRecorderWeb\r\n  extends WebPlugin\r\n  implements ScreenRecorderPlugin\r\n{\r\n  async echo(options: { value: string }): Promise<{ value: string }> {\r\n    console.log('ECHO', options);\r\n    return { value: options.value };\r\n  }\r\n\r\n  async start(options: any): Promise<any> {\r\n    console.log('startFunctionCalled', options);\r\n    throw this.unimplemented('The start method is not implemented on the web platform.');\r\n  }\r\n\r\n  async stop(options: any): Promise<any> {\r\n    console.log('stopFunctionCalled', options);\r\n    throw this.unimplemented('The stop method is not implemented on the web platform.');\r\n  }\r\n\r\n  async recorder_status(options: any): Promise<any> {\r\n    console.log('recorderStatusFunctionCalled', options);\r\n    throw this.unimplemented('The recorder_status method is not implemented on the web platform.');\r\n  }\r\n\r\n  addListener(\r\n    eventName: string,\r\n    listenerFunc: (event: any) => void,\r\n  ): Promise<PluginListenerHandle> & PluginListenerHandle {\r\n    const handle = super.addListener(eventName, listenerFunc);\r\n    return Object.assign(handle, {\r\n      remove: async () => {\r\n        console.log(`Listener for ${eventName} removed`);\r\n        (await handle).remove();\r\n      },\r\n    });\r\n  }\r\n}\r\n"]}